/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * IngredientPanel.java
 *
 * Created on Feb 15, 2010, 11:45:48 AM
 */

package com.googlecode.menugen.ui.recipe;

import java.util.ArrayList;
import java.util.List;

import javax.swing.DefaultComboBoxModel;

import com.googlecode.menugen.domain.Ingredient;
import com.googlecode.menugen.domain.MeasuredIngredient;
import com.googlecode.menugen.domain.Unit;
import com.googlecode.menugen.service.IngredientService;
import com.googlecode.menugen.service.UnitService;
import com.googlecode.menugen.utility.SpringContextUtility;

/**
 * 
 * @author tstavenger
 */
public class IngredientPanel extends javax.swing.JPanel {

	private MeasuredIngredient measuredIngredient;
	private List<Ingredient> ingredients = SpringContextUtility.getBean(
			IngredientService.class).retrieve();
	private List<Unit> units = SpringContextUtility.getBean(UnitService.class)
			.retrieve();

	/** Creates new form IngredientPanel */
	public IngredientPanel(MeasuredIngredient measuredIngredient) {
		initComponents();

		
		String[] unitAbbreviations = new String[units.size()];
		
		for (int i = 0; i < units.size(); i++) {
			unitAbbreviations[i] = units.get(i).getAbbreviation();
		}
		
		unitComboBox.setModel(new DefaultComboBoxModel(unitAbbreviations));
		
		String[] ingredientNames = new String[ingredients.size()];
		
		for (int i = 0; i < ingredients.size(); i++) {
			ingredientNames[i] = ingredients.get(i).getName();
		}
		
		ingredientComboBox.setModel(new DefaultComboBoxModel(ingredientNames));

		if (measuredIngredient == null) {
			this.measuredIngredient = new MeasuredIngredient();
		} else {
			this.measuredIngredient = measuredIngredient;
		}

		amountText.setText(String.valueOf(this.measuredIngredient.getAmount()));

		if (this.measuredIngredient.getUnit() != null) {
			unitComboBox.setSelectedItem(this.measuredIngredient.getUnit()
					.getAbbreviation());
		}

		if (this.measuredIngredient.getIngredient() != null) {
			ingredientComboBox.setSelectedItem(this.measuredIngredient
					.getIngredient().getName());
		}
	}

	public MeasuredIngredient getMeasuredIngredient() {
		measuredIngredient.setAmount(Double.parseDouble(amountText.getText()));

		Unit unit;

		if (unitComboBox.getSelectedIndex() == -1) {
			String abbreviation = (String) unitComboBox.getSelectedItem();
			unit = new Unit();
			unit.setAbbreviation(abbreviation);
		} else {
			unit = units.get(unitComboBox.getSelectedIndex());
		}

		measuredIngredient.setUnit(unit);

		Ingredient ingredient;

		if (ingredientComboBox.getSelectedIndex() == -1) {
			String name = (String) ingredientComboBox.getSelectedItem();
			ingredient = new Ingredient();
			ingredient.setName(name);
		} else {
			ingredient = ingredients.get(ingredientComboBox.getSelectedIndex());
		}

		measuredIngredient.setIngredient(ingredient);

		return measuredIngredient;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        amountText = new javax.swing.JTextField();
        unitComboBox = new javax.swing.JComboBox();
        ingredientComboBox = new javax.swing.JComboBox();

        unitComboBox.setEditable(true);

        ingredientComboBox.setEditable(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(amountText, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(unitComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ingredientComboBox, 0, 225, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(amountText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(unitComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(ingredientComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField amountText;
    private javax.swing.JComboBox ingredientComboBox;
    private javax.swing.JComboBox unitComboBox;
    // End of variables declaration//GEN-END:variables

}
