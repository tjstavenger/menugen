/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SearchPanel.java
 *
 * Created on Feb 26, 2010, 10:00:09 AM
 */

package com.googlecode.menugen.ui.search;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;

import com.googlecode.menugen.domain.Recipe;
import com.googlecode.menugen.service.RecipeService;
import com.googlecode.menugen.utility.SpringContextUtility;

/**
 * Visually represent searching for {@link Recipe}.
 */
public class SearchPanel extends javax.swing.JPanel {

	/** Creates new form SearchPanel */
	public SearchPanel() {
		initComponents();

		searchResultsTable.addMouseListener(new MouseAdapter() {

			@Override
			public void mousePressed(MouseEvent e) {
				if (e.getClickCount() == 2) {
					int row = searchResultsTable.getSelectedRow();
					SearchResultsTableModel tableModel = (SearchResultsTableModel) searchResultsTable
							.getModel();
					Recipe recipe = tableModel.getRecipes().get(row);
					fireRecipeSelectedEvent(recipe);
				}
			}
		});
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		searchCriteriaText = new javax.swing.JTextField();
		searchButton = new javax.swing.JButton();
		searchResultsLabel = new javax.swing.JLabel();
		searchResultsSeparator = new javax.swing.JSeparator();
		searchResultsScrollPane = new javax.swing.JScrollPane();
		searchResultsTable = new javax.swing.JTable();

		searchButton.setText("Search");
		searchButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				searchButtonActionPerformed(evt);
			}
		});

		searchResultsLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
		searchResultsLabel.setText("Search Results");

		searchResultsTable.setModel(new javax.swing.table.DefaultTableModel(
				new Object[][] {

				}, new String[] { "Name" }) {
			Class[] types = new Class[] { java.lang.String.class };
			boolean[] canEdit = new boolean[] { false };

			public Class getColumnClass(int columnIndex) {
				return types[columnIndex];
			}

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit[columnIndex];
			}
		});
		searchResultsScrollPane.setViewportView(searchResultsTable);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout
				.setHorizontalGroup(layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								javax.swing.GroupLayout.Alignment.TRAILING,
								layout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.TRAILING)
														.addComponent(
																searchResultsScrollPane,
																javax.swing.GroupLayout.Alignment.LEADING,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																380,
																Short.MAX_VALUE)
														.addComponent(
																searchResultsSeparator,
																javax.swing.GroupLayout.Alignment.LEADING,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																380,
																Short.MAX_VALUE)
														.addGroup(
																layout
																		.createSequentialGroup()
																		.addComponent(
																				searchCriteriaText,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				305,
																				Short.MAX_VALUE)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																		.addComponent(
																				searchButton))
														.addComponent(
																searchResultsLabel,
																javax.swing.GroupLayout.Alignment.LEADING))
										.addContainerGap()));
		layout
				.setVerticalGroup(layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								layout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																searchCriteriaText,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																searchButton))
										.addGap(18, 18, 18)
										.addComponent(searchResultsLabel)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(
												searchResultsSeparator,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												10,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(
												searchResultsScrollPane,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												201, Short.MAX_VALUE)
										.addContainerGap()));
	}// </editor-fold>//GEN-END:initComponents

	private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_searchButtonActionPerformed
		List<Recipe> recipes = recipeService.search(searchCriteriaText
				.getText());
		searchResultsTable.setModel(new SearchResultsTableModel(recipes));
	}// GEN-LAST:event_searchButtonActionPerformed

	/**
	 * Add a listener for {@link Recipe} selection events.
	 * 
	 * @param listener
	 *            {@link RecipeSelectedEventListener} to add
	 */
	public void addRecipeSelectedEventListener(
			RecipeSelectedEventListener listener) {
		listenerList.add(RecipeSelectedEventListener.class, listener);
	}

	/**
	 * Remove listener for {@link Recipe} selection events.
	 * 
	 * @param listener
	 *            {@link RecipeSelectedEventListener} to remove
	 */
	public void removeRecipeSelectedEventListener(
			RecipeSelectedEventListener listener) {
		listenerList.remove(RecipeSelectedEventListener.class, listener);
	}

	/**
	 * Fire a new {@link RecipeSelectedEvent} for the currently selected
	 * {@link Recipe}.
	 * 
	 * @param recipe
	 *            selected {@link Recipe}
	 */
	private void fireRecipeSelectedEvent(Recipe recipe) {
		RecipeSelectedEvent event = new RecipeSelectedEvent(recipe);
		RecipeSelectedEventListener[] listeners = listenerList
				.getListeners(RecipeSelectedEventListener.class);

		for (RecipeSelectedEventListener recipeSelectedEventListener : listeners) {
			recipeSelectedEventListener.selectRecipe(event);
		}
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton searchButton;
	private javax.swing.JTextField searchCriteriaText;
	private javax.swing.JLabel searchResultsLabel;
	private javax.swing.JScrollPane searchResultsScrollPane;
	private javax.swing.JSeparator searchResultsSeparator;
	private javax.swing.JTable searchResultsTable;
	// End of variables declaration//GEN-END:variables

	private RecipeService recipeService = SpringContextUtility
			.getBean(RecipeService.class);
}
