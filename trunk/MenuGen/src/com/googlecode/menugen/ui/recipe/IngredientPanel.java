/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * IngredientPanel.java
 *
 * Created on Feb 15, 2010, 11:45:48 AM
 */

package com.googlecode.menugen.ui.recipe;

import java.util.List;

import javax.swing.DefaultComboBoxModel;

import org.apache.commons.lang.StringUtils;

import com.googlecode.menugen.domain.Ingredient;
import com.googlecode.menugen.domain.MeasuredIngredient;
import com.googlecode.menugen.domain.Unit;
import com.googlecode.menugen.service.IngredientService;
import com.googlecode.menugen.service.UnitService;
import com.googlecode.menugen.utility.SpringContextUtility;

/**
 * Represent a {@link MeasuredIngredient}
 */
public class IngredientPanel extends RemovablePanel {
	private static final long serialVersionUID = 1L;
	
	private static List<Ingredient> INGREDIENTS = SpringContextUtility.getBean(
			IngredientService.class).retrieve();
	private static List<Unit> UNITS = SpringContextUtility.getBean(
			UnitService.class).retrieve();
	
	private MeasuredIngredient measuredIngredient;

	/** Creates new form IngredientPanel */
	public IngredientPanel(MeasuredIngredient measuredIngredient) {
		initComponents();

		populateDomain(false);

		if (measuredIngredient == null) {
			this.measuredIngredient = new MeasuredIngredient();
		} else {
			this.measuredIngredient = measuredIngredient;
		}

		amountText.setText(String.valueOf(this.measuredIngredient.getAmount()));

		if (this.measuredIngredient.getUnit() != null) {
			unitComboBox.setSelectedItem(this.measuredIngredient.getUnit()
					.getAbbreviation());
		}

		if (this.measuredIngredient.getIngredient() != null) {
			ingredientComboBox.setSelectedItem(this.measuredIngredient
					.getIngredient().getName());
		}
	}

	/**
	 * Populate the drop-downs with the domain values, optionally retrieving the
	 * latest values from the database.
	 * 
	 * @param retrieve
	 *            boolean true if should retrieve latest values from the
	 *            database
	 */
	public void populateDomain(boolean retrieve) {
		if (retrieve) {
			INGREDIENTS = SpringContextUtility.getBean(IngredientService.class)
					.retrieve();
			UNITS = SpringContextUtility.getBean(UnitService.class).retrieve();
		}

		String[] unitAbbreviations = new String[UNITS.size() + 1];
		unitAbbreviations[0] = "";

		for (int i = 0; i < UNITS.size(); i++) {
			unitAbbreviations[i + 1] = UNITS.get(i).getAbbreviation();
		}

		unitComboBox.setModel(new DefaultComboBoxModel(unitAbbreviations));

		String[] ingredientNames = new String[INGREDIENTS.size()];

		for (int i = 0; i < INGREDIENTS.size(); i++) {
			ingredientNames[i] = INGREDIENTS.get(i).getName();
		}

		ingredientComboBox.setModel(new DefaultComboBoxModel(ingredientNames));
	}

	/**
	 * Get the {@link MeasuredIngredient} represented by this panel.
	 * 
	 * @return {@link MeasuredIngredient}
	 */
	public MeasuredIngredient getMeasuredIngredient() {
		measuredIngredient.setAmount(Double.parseDouble(amountText.getText()));

		Unit unit = null;

		if (unitComboBox.getSelectedIndex() == -1) {
			String abbreviation = (String) unitComboBox.getSelectedItem();

			if (StringUtils.isNotBlank(abbreviation)) {
				unit = new Unit();
				unit.setAbbreviation(abbreviation);
			}
		} else {
			// Skip empty option
			if (unitComboBox.getSelectedIndex() > 0) {
				unit = UNITS.get(unitComboBox.getSelectedIndex() - 1);
			}
		}

		measuredIngredient.setUnit(unit);

		Ingredient ingredient;

		if (ingredientComboBox.getSelectedIndex() == -1) {
			String name = (String) ingredientComboBox.getSelectedItem();
			ingredient = new Ingredient();
			ingredient.setName(name);
		} else {
			ingredient = INGREDIENTS.get(ingredientComboBox.getSelectedIndex());
		}

		measuredIngredient.setIngredient(ingredient);

		return measuredIngredient;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		amountText = new javax.swing.JFormattedTextField();
		unitComboBox = new javax.swing.JComboBox();
		ingredientComboBox = new javax.swing.JComboBox();
		removeButton = new javax.swing.JButton();

		amountText
				.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(
						new javax.swing.text.NumberFormatter()));

		unitComboBox.setEditable(true);

		ingredientComboBox.setEditable(true);

		removeButton.setText("X");
		removeButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				removeButtonActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout
				.setHorizontalGroup(layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								layout
										.createSequentialGroup()
										.addComponent(
												amountText,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												35,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
										.addComponent(
												unitComboBox,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												93,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
										.addComponent(ingredientComboBox, 0,
												213, Short.MAX_VALUE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(removeButton)
										.addContainerGap()));
		layout.setVerticalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				layout.createParallelGroup(
						javax.swing.GroupLayout.Alignment.BASELINE)
						.addComponent(amountText,
								javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addComponent(unitComboBox,
								javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addComponent(ingredientComboBox,
								javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addComponent(removeButton)));
	}// </editor-fold>//GEN-END:initComponents

	/**
	 * Fire the remove event for the parent component to remove this instance
	 * from display.
	 * 
	 * @param evt
	 *            click event
	 */
	private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton1ActionPerformed
		fireRemovePanelEvent(this);
	}// GEN-LAST:event_jButton1ActionPerformed

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JFormattedTextField amountText;
	private javax.swing.JComboBox ingredientComboBox;
	private javax.swing.JButton removeButton;
	private javax.swing.JComboBox unitComboBox;
	// End of variables declaration//GEN-END:variables

}
