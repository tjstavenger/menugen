/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NewJPanel.java
 *
 * Created on Feb 15, 2010, 11:24:12 AM
 */
package com.googlecode.menugen.ui.recipe;

import java.awt.Component;
import java.awt.FlowLayout;

import javax.swing.JScrollPane;
import javax.swing.SwingUtilities;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.math.NumberUtils;

import com.googlecode.menugen.domain.MeasuredIngredient;
import com.googlecode.menugen.domain.Recipe;
import com.googlecode.menugen.service.RecipeService;
import com.googlecode.menugen.utility.SpringContextUtility;
import javax.swing.JPanel;

/**
 * Visaully represent a {@link Recipe} for create/update.
 */
public class RecipePanel extends javax.swing.JPanel implements PanelRemovedEventListener {
	private static final long serialVersionUID = 1L;
	
	private Recipe recipe;

    /** Creates new form NewJPanel */
    public RecipePanel(Recipe recipe) {
        initComponents();

        instructionsPanel.setLayout(new VerticalFlowLayout(FlowLayout.LEFT));
        ingredientsPanel.setLayout(new VerticalFlowLayout(FlowLayout.LEFT));

        if (recipe == null) {
            this.recipe = new Recipe();
        } else {
            this.recipe = recipe;
            populateValues();
        }
    }

    /**
     * Populate the components with the data values from the current {@link Recipe}.
     */
    private void populateValues() {
        ingredientsPanel.removeAll();
        instructionsPanel.removeAll();

        nameText.setText(recipe.getName());

        if (recipe.getServes() != null) {
            servesText.setText(String.valueOf(recipe.getServes()));
        }

        if (recipe.getPrepartionTime() != null) {
            prepTimeText.setText(String.valueOf(recipe.getPrepartionTime()));
        }

        if (recipe.getCookingTime() != null) {
            cookTimeText.setText(String.valueOf(recipe.getCookingTime()));
        }

        if (recipe.getIngredients() != null) {
            for (MeasuredIngredient measuredIngredient : recipe.getIngredients()) {
                addIngredient(measuredIngredient);
            }
        }

        if (recipe.getInstructions() != null) {
            for (String instruction : recipe.getInstructions()) {
                addStep(instruction);
            }
        }

        notesText.setText(recipe.getNotes());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nameLabel = new javax.swing.JLabel();
        nameText = new javax.swing.JTextField();
        servesLabel = new javax.swing.JLabel();
        servesText = new javax.swing.JFormattedTextField();
        prepTimeLabel = new javax.swing.JLabel();
        prepTimeText = new javax.swing.JFormattedTextField();
        cookTimeLabel = new javax.swing.JLabel();
        cookTimeText = new javax.swing.JFormattedTextField();
        ingredientsSeparator = new javax.swing.JSeparator();
        ingredientsLabel = new javax.swing.JLabel();
        instructionsLabel = new javax.swing.JLabel();
        instructionsSeparator = new javax.swing.JSeparator();
        notesLabel = new javax.swing.JLabel();
        notesSeparator = new javax.swing.JSeparator();
        notesScrollPane = new javax.swing.JScrollPane();
        notesText = new javax.swing.JTextArea();
        amountLabel = new javax.swing.JLabel();
        unitLabel = new javax.swing.JLabel();
        ingredientLabel = new javax.swing.JLabel();
        ingredientsScrollPane = new javax.swing.JScrollPane();
        ingredientsPanel = new javax.swing.JPanel();
        instructionsScrollPane = new javax.swing.JScrollPane();
        instructionsPanel = new javax.swing.JPanel();
        saveButton = new javax.swing.JButton();
        addIngredientButton = new javax.swing.JButton();
        addStepButton = new javax.swing.JButton();

        setRequestFocusEnabled(false);

        nameLabel.setText("Name:");

        servesLabel.setText("Serves:");

        servesText.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));

        prepTimeLabel.setText("Prep Time:");

        prepTimeText.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));

        cookTimeLabel.setText("Cook Time:");

        cookTimeText.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));

        ingredientsLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        ingredientsLabel.setText("Ingredients");

        instructionsLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        instructionsLabel.setText("Instructions");

        notesLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        notesLabel.setText("Notes");

        notesScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        notesText.setColumns(20);
        notesText.setRows(5);
        notesScrollPane.setViewportView(notesText);

        amountLabel.setText("Amount");

        unitLabel.setText("Unit");

        ingredientLabel.setText("Ingredient");

        ingredientsPanel.setLayout(null);
        ingredientsScrollPane.setViewportView(ingredientsPanel);

        instructionsPanel.setLayout(null);
        instructionsScrollPane.setViewportView(instructionsPanel);

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        addIngredientButton.setText("Add Ingredient");
        addIngredientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addIngredientButtonActionPerformed(evt);
            }
        });

        addStepButton.setText("Add Step");
        addStepButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addStepButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(instructionsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(amountLabel)
                                .addGap(36, 36, 36)
                                .addComponent(unitLabel)
                                .addGap(115, 115, 115)
                                .addComponent(ingredientLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(nameLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(nameText, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(servesLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(servesText, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(prepTimeLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(prepTimeText, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(cookTimeLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cookTimeText, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE))
                            .addComponent(ingredientsLabel)
                            .addComponent(ingredientsSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                            .addComponent(ingredientsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(instructionsLabel))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(instructionsSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(notesLabel))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(notesSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(notesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(157, 157, 157)
                        .addComponent(addIngredientButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(167, 167, 167)
                        .addComponent(addStepButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(179, 179, 179)
                        .addComponent(saveButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(nameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(servesLabel)
                    .addComponent(servesText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(prepTimeLabel)
                    .addComponent(prepTimeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cookTimeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cookTimeLabel))
                .addGap(18, 18, 18)
                .addComponent(ingredientsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ingredientsSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(amountLabel)
                    .addComponent(unitLabel)
                    .addComponent(ingredientLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ingredientsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addIngredientButton)
                .addGap(7, 7, 7)
                .addComponent(instructionsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(instructionsSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(instructionsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addStepButton)
                .addGap(12, 12, 12)
                .addComponent(notesLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(notesSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(notesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(saveButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Add a new, empty instructions step and scroll the instructions scroll pane to the bottom.
     * 
     * @param evt click event
     */
    private void addStepButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_addStepButtonActionPerformed
        addStep(null);
        scrollToBottom(instructionsScrollPane);
    }// GEN-LAST:event_addStepButtonActionPerformed

    /**
     * Dynamically add a step in the recipe's instructions.
     * 
       @param instructions new step to add
     */
    private void addStep(String instructions) {
        int step = instructionsPanel.getComponentCount() + 1;
        InstructionPanel instructionPanel = new InstructionPanel(instructions);
        instructionPanel.addPanelRemovedEventListener(this);
        instructionPanel.setStep(step);
        instructionsPanel.add(instructionPanel);
        instructionsPanel.revalidate();
        instructionsPanel.repaint();
    }

    /**
     * Add a new, empty {@link MeasuredIngredient} and scroll the ingredients scroll pane to the bottom for data entry.
     * 
     * @param evt click event
     */
    private void addIngredientButtonActionPerformed(
            java.awt.event.ActionEvent evt) {// GEN-FIRST:event_addIngredientButtonActionPerformed
        addIngredient(null);
        scrollToBottom(ingredientsScrollPane);
    }// GEN-LAST:event_addIngredientButtonActionPerformed

    /**
     * Dynamically add a {@link MeasuredIngredient} to the panel containing all this recipe's ingredients.
     *  
     * @param measuredIngredient {@link MeasuredIngredient} to add
     */
    private void addIngredient(MeasuredIngredient measuredIngredient) {
        IngredientPanel ingredientPanel = new IngredientPanel(measuredIngredient);
        ingredientPanel.addPanelRemovedEventListener(this);

        ingredientsPanel.add(ingredientPanel);
        ingredientsPanel.revalidate();
        ingredientsPanel.repaint();
    }

    /**
     * Triggered by a user when a panel should be removed from its parent.
     *
     * @param event
     *            {@link PanelRemovedEvent} containing the {@link JPanel} to
     *            remove
     */
    @Override
    public void removePanel(PanelRemovedEvent event) {
        JPanel panel = event.getSource();

        if (panel instanceof IngredientPanel) {
            ingredientsPanel.remove(panel);
            ingredientsPanel.revalidate();
            ingredientsPanel.repaint();
        } else if (panel instanceof InstructionPanel) {
            instructionsPanel.remove(panel);

            for (int i = 0; i < instructionsPanel.getComponentCount(); i++) {
                ((InstructionPanel) instructionsPanel.getComponent(i)).setStep(i + 1);
            }

            instructionsPanel.revalidate();
            instructionsPanel.repaint();
        }
    }

    /**
     * Scroll the {@link JScrollPane} to the bottom.
     * 
     * @param jScrollPane {@link JScrollPane} to scroll
     */
    private void scrollToBottom(final JScrollPane jScrollPane) {
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                jScrollPane.getVerticalScrollBar().setValue(
                        jScrollPane.getVerticalScrollBar().getMaximum());
            }
        });
    }

    /**
     * Call the {@link RecipeService#save(Recipe)}
     * 
     * @param evt click event
     */
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_saveButtonActionPerformed
        copyValues();

        this.recipe = recipeService.save(recipe);

        for (Component ingredientPanel : ingredientsPanel.getComponents()) {
            ((IngredientPanel) ingredientPanel).populateDomain(true);
        }

        populateValues();
    }// GEN-LAST:event_saveButtonActionPerformed

    /**
     * Copy the values in the components back into the {@link Recipe} for sending to the service layer.
     */
    private void copyValues() {
        recipe.setName(nameText.getText());

        if (NumberUtils.isNumber(servesText.getText())) {
            recipe.setServes(Integer.valueOf(servesText.getText()));
        }

        if (NumberUtils.isNumber(prepTimeText.getText())) {
            recipe.setPrepartionTime(Double.valueOf(prepTimeText.getText()));
        }

        if (NumberUtils.isNumber(cookTimeText.getText())) {
            recipe.setCookingTime(Double.valueOf(cookTimeText.getText()));
        }

        recipe.getIngredients().clear();

        if (ingredientsPanel.getComponentCount() > 0) {
            for (Component component : ingredientsPanel.getComponents()) {
                IngredientPanel ingredientPanel = (IngredientPanel) component;
                MeasuredIngredient measuredIngredient = ingredientPanel.getMeasuredIngredient();

                if (measuredIngredient.getIngredient() != null) {
                    recipe.getIngredients().add(measuredIngredient);
                }
            }
        }

        recipe.getInstructions().clear();

        if (instructionsPanel.getComponentCount() > 0) {
            for (Component component : instructionsPanel.getComponents()) {
                InstructionPanel instructionPanel = (InstructionPanel) component;
                String instruction = instructionPanel.getInstruction();

                if (StringUtils.isNotBlank(instruction)) {
                    recipe.getInstructions().add(instruction.trim());
                }
            }
        }

        recipe.setNotes(notesText.getText());
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addIngredientButton;
    private javax.swing.JButton addStepButton;
    private javax.swing.JLabel amountLabel;
    private javax.swing.JLabel cookTimeLabel;
    private javax.swing.JFormattedTextField cookTimeText;
    private javax.swing.JLabel ingredientLabel;
    private javax.swing.JLabel ingredientsLabel;
    private javax.swing.JPanel ingredientsPanel;
    private javax.swing.JScrollPane ingredientsScrollPane;
    private javax.swing.JSeparator ingredientsSeparator;
    private javax.swing.JLabel instructionsLabel;
    private javax.swing.JPanel instructionsPanel;
    private javax.swing.JScrollPane instructionsScrollPane;
    private javax.swing.JSeparator instructionsSeparator;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameText;
    private javax.swing.JLabel notesLabel;
    private javax.swing.JScrollPane notesScrollPane;
    private javax.swing.JSeparator notesSeparator;
    private javax.swing.JTextArea notesText;
    private javax.swing.JLabel prepTimeLabel;
    private javax.swing.JFormattedTextField prepTimeText;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel servesLabel;
    private javax.swing.JFormattedTextField servesText;
    private javax.swing.JLabel unitLabel;
    // End of variables declaration//GEN-END:variables
    private RecipeService recipeService = SpringContextUtility.getBean(RecipeService.class);
}
